version: 2.1

aliases:

- &setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: true

- &step_restore_cache_go_mod
    restore_cache:
      keys:
        - go-mod-v0-{{ checksum "go.sum" }}

- &step_save_cache_go_mod
    save_cache:
      key: go-mod-v0-{{ checksum "go.sum" }}
      paths:
        - "/go/pkg/mod"

- &dockerhub-login
    run:
      name: login to docker hub
      command: echo "$DOCKER_PASS" | docker login --username "$DOCKER_USER" --password-stdin

orbs:
  codecov: codecov/codecov@1.0.1

executors:
  docker-publisher:
    docker:
      - image: circleci/buildpack-deps:stretch
    environment:
      SOURCE_BRANCH: $CIRCLE_BRANCH
      SOURCE_COMMIT: $CIRCLE_SHA1
      DOCKER_REPO: syntaqx/serve
      DOCKERFILE_PATH: ./Dockerfile
      # COMMIT_MSG:

jobs:

  setup:
    docker:
      - image: circleci/golang:1.12
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - *step_restore_cache_go_mod
      - run: go mod download
      - run: go mod tidy && git diff --exit-code; code=$?; git checkout -- .; (exit $code)
      - *step_save_cache_go_mod

  lint:
    docker:
      - image: golangci/golangci-lint
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - *step_restore_cache_go_mod
      - run: golangci-lint run

  unit-test:
    docker:
      - image: circleci/golang:1.12
        environment:
          GO111MODULE: "on"
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - *step_restore_cache_go_mod
      - run: mkdir -p $TEST_RESULTS
      - run:
          name: run unit tests
          command: |-
            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  # @NOTE: unit-test and coverage both execute the tests, which is unnecessarily
  # non-performant. These can probably be merged, but I'm not sure how
  # `gotestsum` will work with the additional flags - Needs testing.
  coverage:
    docker:
      - image: circleci/golang:1.12
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - *step_restore_cache_go_mod
      - run: go test -race -cover -coverprofile=coverage.out -covermode=atomic ./...
      - codecov/upload:
          file: coverage.out

  binary_release:
    docker:
      - image: circleci/golang:1.12
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - run: curl -sL https://git.io/goreleaser | bash

  docker_build:
    executor: docker-publisher
    environment:
      DOCKER_TAG: latest
      IMAGE_NAME: $DOCKER_REPO:$DOCKER_TAG
    steps:
      - checkout
      - *setup_remote_docker
      - *dockerhub-login
      - run: hooks/build
      - run:
          name: archive docker image
          command: docker save -o ./serve.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths: ./serve.tar

  docker_latest_release:
    executor: docker-publisher
    environment:
      DOCKER_TAG: $CIRCLE_TAG
      IMAGE_NAME: $DOCKER_REPO:$CIRCLE_TAG
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - *setup_remote_docker
      - run:
          name: load archived docker image
          command: docker load -i /tmp/workspace/serve.tar
      - *dockerhub-login
      - run: docker push $IMAGE_NAME

  docker_version_release:
    executor: docker-publisher
    environment:
      DOCKER_TAG: $CIRCLE_TAG
      IMAGE_NAME: $DOCKER_REPO:$CIRCLE_TAG
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - *setup_remote_docker
      - run:
          name: load archived docker image
          command: docker load -i /tmp/workspace/serve.tar
      - *dockerhub-login
      - run: docker push $IMAGE_NAME

  # @TODO:
  # - disable travis
  # - docker push... to where?
  # - goreleaser
  # - release (docker tag && docker push)
  # - deploy.. to where?

workflows:
  version: 2
  commit:
    jobs:
      - setup

      - lint:
          requires:
            - setup
      - unit-test:
          requires:
            - setup
      - coverage:
          requires:
            - setup

      - binary_release:
          requires:
            - lint
            - unit-test
            - coverage

  release:
    jobs:
      - docker_build:
          context: docker-hub
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - docker_latest_release:
          context: docker-hub
          requires:
            - docker_build
          filters:
            branches:
              only: master

      - docker_version_release:
          context: docker-hub
          requires:
            - docker_build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  # release:
  #   jobs:
  #     - release:
  #         filters:
  #           branches:
  #             ignore: /.*/
  #           tags:
  #             only: /v[0-9]+(\.[0-9]+)*(-.*)*/
